import React from 'react';
import { Modal, ListGroup, Image, Button, Badge } from 'react-bootstrap';
import { useSelector, useDispatch } from 'react-redux';
import { Link } from 'react-router-dom';
import Avatar from './Avatar';
import moment from 'moment';
import { isReadNotify, NOTIFY_TYPES, deleteAllNotifies } from '../redux/actions/notifyAction';
import NoNotice from '../images/notice.png';

const NotifyModal = () => {
    const { auth, notify } = useSelector(state => state);
    const dispatch = useDispatch();

    const handleIsRead = (msg) => {
        dispatch(isReadNotify({ msg, auth }));
    };

    const handleSound = () => {
        dispatch({ type: NOTIFY_TYPES.UPDATE_SOUND, payload: !notify.sound });
    };

    const handleDeleteAll = () => {
        const newArr = notify.data.filter(item => item.isRead === false);
        if (newArr.length === 0) return dispatch(deleteAllNotifies(auth.token));

        if (window.confirm(`You have ${newArr.length} unread notices. Are you sure you want to delete all?`)) {
            return dispatch(deleteAllNotifies(auth.token));
        }
    };

    return (
        <Modal.Dialog style={{ minWidth: '300px', margin: 0 }}>
            <Modal.Header closeButton>
                <Modal.Title>Notifications</Modal.Title>
                <Button variant="link" onClick={handleSound} className="p-0 ml-auto">
                    {notify.sound ? (
                        <i className="fas fa-bell text-danger" style={{ fontSize: '1.2rem' }} />
                    ) : (
                        <i className="fas fa-bell-slash text-danger" style={{ fontSize: '1.2rem' }} />
                    )}
                </Button>
            </Modal.Header>

            <Modal.Body style={{ maxHeight: 'calc(100vh - 200px)', overflow: 'auto' }}>
                {notify.data.length === 0 ? (
                    <Image src={NoNotice} fluid className="w-100" />
                ) : (
                    <ListGroup variant="flush">
                    {notify.data.map((msg, index) => (
                      <ListGroup.Item key={index} className="px-0 py-2 border-0">
                        <Link
                          to={msg?.url || '#'}
                          className="d-flex text-dark align-items-center"
                          onClick={() => handleIsRead(msg)}
                        >
                          {/* ✅ Protección ante msg.user null o undefined */}
                          <Avatar
                            src={msg.user?.avatar || '/default-avatar.png'}
                            size="big-avatar"
                            className="mr-2"
                          />
                  
                          <div className="flex-fill">
                            <div>
                              <strong>{msg.user?.username || 'Usuario desconocido'}</strong> {msg.text || ''}
                            </div>
                  
                            {/* ✅ Validación segura de contenido */}
                            {msg.content && (
                              <small className="text-muted">
                                {msg.content.slice(0, 20)}...
                              </small>
                            )}
                          </div>
                  
                          {/* ✅ Validación segura de imágenes/videos */}
                          {msg.image && (
                            <div style={{ width: '30px' }}>
                              {msg.image.match(/video/i) ? (
                                <video src={msg.image} width="100%" />
                              ) : (
                                <Avatar src={msg.image} size="medium-avatar" />
                              )}
                            </div>
                          )}
                        </Link>
                  
                        {/* ✅ Validación segura de fecha y estado de lectura */}
                        <div className="d-flex justify-content-between mt-1 px-2">
                          <small className="text-muted">
                            {msg.createdAt ? moment(msg.createdAt).fromNow() : ''}
                          </small>
                          {!msg.isRead && <Badge variant="primary">New</Badge>}
                        </div>
                      </ListGroup.Item>
                    ))}
                  </ListGroup>
                  
                )}
            </Modal.Body>

            <Modal.Footer className="justify-content-between">
                <small className="text-muted">
                    {notify.data.length} notification(s)
                </small>
                <Button
                    variant="link"
                    className="text-danger p-0"
                    onClick={handleDeleteAll}
                >
                    Delete All
                </Button>
            </Modal.Footer>
        </Modal.Dialog>
    );
};

export default NotifyModal;